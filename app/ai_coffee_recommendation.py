# -*- coding: utf-8 -*-
"""AI_Coffee_Recomandation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10YtQjVE2VLphtEzz-ro9jbVDkqmjP_bi

# First Execution
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import missingno as mno
import category_encoders as ce
import sklearn

from fancyimpute import KNN
from pylab import rcParams
from sklearn.neighbors import NearestNeighbors
from sklearn.cluster import DBSCAN
from sklearn import preprocessing
from sklearn import metrics
from scipy.sparse import csr_matrix
from collections import Counter


print('runned')
  
"""data visualization parameters"""

# Commented out IPython magic to ensure Python compatibility.
plt.style.use('seaborn-colorblind')
# %matplotlib inline
rcParams["figure.figsize"] =10,6

"""# Data Information"""

# read dataset
df = pd.read_csv('coffee.csv')


"""# Data Preparation"""


#filling missing values with knn methods
knn_imputer = KNN()
df[df.select_dtypes([np.int64, np.float64]).columns] = knn_imputer.fit_transform(df[df.select_dtypes([np.int64, np.float64]).columns])


df = df.apply(lambda x:x.fillna(x.value_counts().index[0]))


df.drop(['Lot.Number'], axis = 1, inplace = True)
df.drop(['Unnamed: 0'], axis = 1, inplace = True)
df.drop(['Certification.Address'], axis = 1, inplace = True)
df.drop(['Certification.Contact'], axis = 1, inplace = True)
#df.drop(['Certification.Body'], axis = 1, inplace = True)

df['index'] = df.index

df['Coffee_Name'] = df['Owner'].index.astype(str) +'_'+df['Country.of.Origin']+'_'+df['Variety']+'_'+df['Region']


column_to_reorder = df.pop('Coffee_Name')
df.insert(0, 'Coffee_Name', column_to_reorder)

"""# Proximity Calculation and Finding Most Similar Beans"""

knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=2, radius=0.4)
knn.fit(df[df.select_dtypes([np.int64, np.float64]).columns])

df_numeric_data = csr_matrix(df[df.select_dtypes([np.int64, np.float64]).columns].values)

df[df.select_dtypes([np.int64, np.float64]).columns]


def get_all_coffee_names():
    return df['Coffee_Name'].to_numpy();


def get_coffee_recommendation(coffee_name):
  n_coffee_to_recommend = 5
  coffee_list = df[df['Coffee_Name'].str.contains(coffee_name)]

  if len(coffee_list):
    coffee_idx = df.index[df['Coffee_Name'] == coffee_name].tolist()
    distances , indices = knn.kneighbors(df_numeric_data[coffee_idx],n_neighbors=n_coffee_to_recommend+1)
    rec_coffee_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]
    recommend_coffee = []

    for val in rec_coffee_indices:
            coffee_idx = df.index[df['index'] == val[0]].tolist()
            recommend_coffee.append({'Title':df.iloc[coffee_idx]['index'].values[0]})

    df_rec = pd.DataFrame(recommend_coffee,index=range(1,n_coffee_to_recommend+1))
    df_to_return = df[['Coffee_Name', 'Species', 'Farm.Name', 'Producer', 'Harvest.Year', 'Processing.Method', 'Aroma', 'Flavor', 'Acidity', 'Balance', 'Altitude']].loc[df_rec.to_numpy().flatten()].to_json(orient='records')
    df_to_return = df_to_return.replace("Farm.Name", "farm_name").replace("Harvest.Year", "harvest_year").replace("Processing.Method", "processing_method").lower()
    return df_to_return
  else:
    return "No coffee found. Please check your input"

#print(get_coffee_recommendation('2_Guatemala_Bourbon_huila'))